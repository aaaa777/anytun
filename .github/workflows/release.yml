name: Build and Pre-release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: true

  windows-build:
    runs-on: windows-latest
    needs: create-release

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Create config file
      run: |
        $v2rayConfigJson = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_V2ray_Config_Json }}")
        [IO.File]::WriteAllBytes(".\client\configs\v2ray\config.json", $v2rayConfigJson)

    - name: Install PSScriptAnalyzer module
      shell: powershell
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module ps2exe

    - name: 'Copy signtool script'
      run: |
        Copy-Item -Path C:/"Program Files (x86)"/"Windows Kits"/10/bin/10.0.22621.0/x86/signtool.exe -Destination .

    - name: 'Check dir'
      run: |
        Get-ChildItem -Path .

    - name: Run build script
      shell: powershell
      run: |
        ./client/windows/Build.ps1 -Ci
      env:
        appVersion: ${{ github.ref_name }} # not used in the script
        pfxPassphrase: ${{ secrets.Pfx_Passphrase }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./client/windows/output/AnytunInstaller.exe
        asset_name: AnytunInstaller.exe
        asset_content_type: application/octet-stream

  ubuntu-build:
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Run build script
      run: |
        ./client/mac/build.sh

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./client/mac/build/anytun.tar.gz
        asset_name: anytun.tar.gz
        asset_content_type: application/octet-stream